{"remainingRequest":"D:\\专高二\\vue\\demo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\专高二\\vue\\demo\\src\\components\\content\\treeselect\\treeSelect.vue?vue&type=style&index=0&id=06581fd9&scoped=true&lang=css&","dependencies":[{"path":"D:\\专高二\\vue\\demo\\src\\components\\content\\treeselect\\treeSelect.vue","mtime":1631926045482},{"path":"D:\\专高二\\vue\\demo\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\专高二\\vue\\demo\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\专高二\\vue\\demo\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\专高二\\vue\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\专高二\\vue\\demo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLXNjcm9sbGJhciAuZWwtc2Nyb2xsYmFyX192aWV3IC5lbC1zZWxlY3QtZHJvcGRvd25fX2l0ZW17CiAgaGVpZ2h0OiBhdXRvOwogIG1heC1oZWlnaHQ6IDI3NHB4OwogIHBhZGRpbmc6IDA7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBvdmVyZmxvdy15OiBhdXRvOwp9Ci5lbC1zZWxlY3QtZHJvcGRvd25fX2l0ZW0uc2VsZWN0ZWR7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQp1bCBsaSA+Pj4uZWwtdHJlZSAuZWwtdHJlZS1ub2RlX19jb250ZW50ewogIGhlaWdodDphdXRvOwogIHBhZGRpbmc6IDAgMjBweDsKfQouZWwtdHJlZS1ub2RlX19sYWJlbHsKICBmb250LXdlaWdodDogbm9ybWFsOwp9Ci5lbC10cmVlID4+Pi5pcy1jdXJyZW50IC5lbC10cmVlLW5vZGVfX2xhYmVsewogIGNvbG9yOiAjNDA5RUZGOwogIGZvbnQtd2VpZ2h0OiA3MDA7Cn0KLmVsLXRyZWUgPj4+LmlzLWN1cnJlbnQgLmVsLXRyZWUtbm9kZV9fY2hpbGRyZW4gLmVsLXRyZWUtbm9kZV9fbGFiZWx7CiAgY29sb3I6IzYwNjI2NjsKICBmb250LXdlaWdodDogbm9ybWFsOwp9Ci5zZWxlY3RJbnB1dHsKICBwYWRkaW5nOiAwIDVweDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9CgovKiDlvIDlj5HnpoHnlKggKi8KLyogLmVsLXRyZWUtbm9kZTpmb2N1cz4uZWwtdHJlZS1ub2RlX19jb250ZW50ewogIGJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjdmYTsKICBjb2xvcjogI2MwYzRjYzsKICBjdXJzb3I6IG5vdC1hbGxvd2VkOwp9Ci5lbC10cmVlLW5vZGVfX2NvbnRlbnQ6aG92ZXJ7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjdmYTsKfSAqLwo="},{"version":3,"sources":["treeSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"treeSelect.vue","sourceRoot":"src/components/content/treeselect","sourcesContent":["<template>\n  <el-select :value=\"valueTitle\" :clearable=\"clearable\" @clear=\"clearHandle\">\n    <el-input\n      class=\"selectInput\"\n      :placeholder=\"placeholder\"\n      v-model=\"filterText\">\n    </el-input>\n\n    <el-option :value=\"valueTitle\" :label=\"valueTitle\" class=\"options\">\n      <el-tree  id=\"tree-option\"\n        ref=\"selectTree\"\n        :accordion=\"accordion\"\n        :data=\"options\"\n        :props=\"props\"\n        :node-key=\"props.value\"    \n        :default-expanded-keys=\"defaultExpandedKey\"\n        :filter-node-method=\"filterNode\"\n        @node-click=\"handleNodeClick\">\n      </el-tree>\n    </el-option>\n  </el-select>\n</template>\n\n<script>\nexport default {\n  name: \"el-tree-select\",\n  props:{\n    /* 配置项 */\n    props:{\n      type: Object,\n      default:()=>{\n        return {\n          value:'id',             // ID字段名\n          label: 'title',         // 显示名称\n          children: 'children'    // 子级字段名\n        }\n      }\n    },\n    /* 选项列表数据(树形结构的对象数组) */\n    options:{\n      type: Array,       \n      default: ()=>{ return [] }\n    },\n    /* 初始值 */\n    value:{\n      type: Number,\n      default: ()=>{ return null }\n    },\n    /* 可清空选项 */\n    clearable:{\n      type:Boolean,\n      default:()=>{ return true }\n    },\n    /* 自动收起 */\n    accordion:{\n      type:Boolean,\n      default:()=>{ return false }\n    },\n    placeholder:{\n      type:String,\n      default:()=>{return \"检索关键字\"}\n    }\n  },\n  data() {\n    return {\n      filterText: '',\n      valueId:this.value,    // 初始值\n      valueTitle:'',\n      defaultExpandedKey:[]    \n    }\n  },\n  mounted(){\n    setTimeout(() => {\n      this.initHandle()\n    }, 3000);\n    \n  },\n  methods: {\n    // 初始化值\n    initHandle(){\n      if(this.valueId){\n        this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.label]     // 初始化显示\n        this.$refs.selectTree.setCurrentKey(this.valueId)       // 设置默认选中\n        this.defaultExpandedKey = [this.valueId]      // 设置默认展开\n      } \n      this.initScroll()\n    },\n    // 初始化滚动条\n    initScroll(){\n      this.$nextTick(()=>{\n        let scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0]\n        let scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar')\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;'\n        scrollBar.forEach(ele => ele.style.width = 0)\n      })\n    },\n    // 切换选项\n    handleNodeClick(node){\n      this.valueTitle = node[this.props.label]\n      this.valueId = node[this.props.value]\n      this.$emit('getValue',this.valueId)\n      this.defaultExpandedKey = []\n    },\n    // 清除选中\n    clearHandle(){\n      this.valueTitle = ''\n      this.valueId = null\n      this.defaultExpandedKey = []\n      this.clearSelected()\n      this.$emit('getValue',null)\n    },\n    /* 清空选中样式 */\n    clearSelected(){\n      let allNode = document.querySelectorAll('#tree-option .el-tree-node')\n      allNode.forEach((element)=>element.classList.remove('is-current'))\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    }\n  },\n  watch: {\n    value(){\n      this.valueId = this.value\n      this.initHandle()\n    },\n    filterText(val) {\n      this.$refs.selectTree.filter(val);\n    }\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  .el-scrollbar .el-scrollbar__view .el-select-dropdown__item{\n    height: auto;\n    max-height: 274px;\n    padding: 0;\n    overflow: hidden;\n    overflow-y: auto;\n  }\n  .el-select-dropdown__item.selected{\n    font-weight: normal;\n  }\n  ul li >>>.el-tree .el-tree-node__content{\n    height:auto;\n    padding: 0 20px;\n  }\n  .el-tree-node__label{\n    font-weight: normal;\n  }\n  .el-tree >>>.is-current .el-tree-node__label{\n    color: #409EFF;\n    font-weight: 700;\n  }\n  .el-tree >>>.is-current .el-tree-node__children .el-tree-node__label{\n    color:#606266;\n    font-weight: normal;\n  }\n  .selectInput{\n    padding: 0 5px;\n    box-sizing: border-box;\n  }\n\n  /* 开发禁用 */\n  /* .el-tree-node:focus>.el-tree-node__content{\n    background-color:transparent;\n    background-color: #f5f7fa;\n    color: #c0c4cc;\n    cursor: not-allowed;\n  }\n  .el-tree-node__content:hover{\n    background-color: #f5f7fa;\n  } */\n</style>\n"]}]}